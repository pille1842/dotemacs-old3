#+TITLE: Emacs Configuration
#+AUTHOR: Eric Haberstroh
#+EMAIL: gpg@erixpage.de
#+STARTUP: indent

* Introduction
This is the [[https://www.gnu.org/software/emacs/][GNU Emacs]] configuration file of Eric Haberstroh
<[[mailto:gpg@erixpage.de][gpg@erixpage.de]]>.

The entire configuration lives within this [[https://orgmode.org/][Org mode]] file.  On startup,
the actual init file (=init.el=) will initialize the package system
and the use-package macro, then extract all the source code blocks
from this file and execute them (i.e. load the rest of the
configuration).  Have a look at =init.el= to see what's happening
there.

You can find the source code of this configuration as well as its
project history on [[https://github.com/pille1842/dotemacs/][GitHub]].  A readable HTML version is stored on
[[http://www.erixpage.de/dotemacs/][Erixpage.de]].

This configuration has been tested with GNU Emacs version 26.1 on a
64-bit Ubuntu MATE 18.04 system.  Emacs has been compiled with the
following commands:

#+BEGIN_SRC shell-script
  ./configure --with-mailutils --with-xwidgets
  make
  sudo make install
#+END_SRC

Most of the compilation requirements can be installed as dependencies
for building Emacs 25.  Some additional libraries and programs have
been installed.  The following commands should suffice to make
compilation of Emacs possible:

#+BEGIN_SRC shell-script
  sudo apt-get build-dep emacs25
  sudo apt install libwebkit2gtk-4.0-dev libgtk-3-dev libsystemd-dev mailutils
#+END_SRC

In the following sections of this document, a variety of configuration
settings are made that fit my personal taste.  While it is certainly
possible to use this configuration in its whole, I would encourage you
to instead pick the parts of it that fit your personal style.

Questions and comments are welcome at [[mailto:gpg@erixpage.de][gpg@erixpage.de]] or the [[https://github.com/pille1842/dotemacs/issues/][GitHub
issue tracker]].

* License
This entire configuration file is licensed under a [[http://creativecommons.org/licenses/by/4.0/][Creative Commons
Attribution 4.0 International]] license (CC BY 4.0).  See that page for
more information about your rights.

[[https://i.creativecommons.org/l/by/4.0/88x31.png]]

* Disable the customization system
I do not wish to use Emacs' built-in customization interface.  I would
also like to keep my init file clean from its ugly insertions.
Therefore let's define a custom file and then proceed to ignore it
forever.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
#+END_SRC

* Backups
Instead of cluttering the file system with backup files ending in =~=,
I prefer Emacs to save all backups in a central directory.  The
following settings, taking directly from [[https://www.emacswiki.org/emacs/BackupDirectory][EmacsWiki]], accomplishes that.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
        backup-directory-alist
        '(("." . "~/.emacs.d/backup/"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

* Interface
** Change frame title
I usually only use one Emacs frame.  The title of that frame should
therefore just be "Emacs".

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "Emacs")
#+END_SRC

** Disable tool-bar and scroll-bar
Disable the ugly tool-bar at the top and the unnecessary scroll-bar at
the right edge of the frame.  While I seldomly use the menu-bar, it
can still be useful sometimes.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Inhibit splash screen and set initial scratch message
By default, Emacs shows a welcome screen on startup.  I would prefer
to see the scratch buffer instead.  A welcoming message can be
displayed there instead.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-scratch-message
        (concat ";; Welcome to Emacs "
                emacs-version
                " on "
                (system-name)
                ".\n\n"))
#+END_SRC

** Theme and font
By default, Emacs uses the Ubuntu font family on my system.  I prefer
[[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]], a free Adobe font.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Source Code Pro 12"))
#+END_SRC

The default theme is a little too bright for my taste.  Let's use
[[https://github.com/bbatsov/zenburn-emacs][Zenburn]] instead.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC

** Show column number in modeline
By default, Emacs only displays the current line number in the
modeline.  I much prefer to see which column I'm in, too.

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

** Helm
[[https://emacs-helm.github.io/helm/][Helm]], in its own words, "is an Emacs framework for incremental
completions and narrowing selections."

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind (("M-x"     . helm-M-x)
           ("C-x C-f" . helm-find-files))
    :config
    (require 'helm-config)
    (helm-mode t))
#+END_SRC

** Yes or No questions
Don't bother me to type in "yes" or "no" when a simple "y" or "n"
should suffice.  These aren't all that close on the keyboard, after
all.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Editing
** Electric pairs
Why type parentheses yourself when there is [[https://www.emacswiki.org/emacs/ElectricPair][Electric Pair mode]]?  Let's
enable it globally.

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

** Highlight matching parens
Especially in Lisp code, finding the right balance of parentheses is
key.  This mode helps.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

* Source control
** Magit
[[https://magit.vc/][Magit]] is an interface to the version control system [[https://git-scm.com/][Git]], implemented
as an Emacs package.

The [[https://magit.vc/manual/magit.html][user manual]] recommends setting up some keybindings and enabling a
global minor mode with some bindings for all file-visiting buffers.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g"   . magit-status)
           ("C-x M-g" . magit-dispatch-popup))
    :config
    (global-magit-file-mode t))
#+END_SRC

* Project management
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode t))
#+END_SRC

* Org mode
[[https://orgmode.org/][Org mode]] is for keeping notes, maintaining TODO lists, planning
projects, and authoring documents with a fast and effective plain-text
system.

In fact, this whole Emacs configuration file is written in Org mode,
because it enables extracting source code blocks from files.  The
extensive documentation of what a particular setting achieves is thus
never far from the actual code, plus you can collapse sections and
organize your settings in a far more structured way.  In short, I love
it.

After we have already added the Org ELPA in the [[*Package system][Package system]]
section, we can now install the =org-plus-contrib= package, which
contains the actual Org package as well as some additional goodies.
This does also have the advantage of giving us the latest version of
Org mode as compared to the one that comes packaged with Emacs.

The [[https://orgmode.org/manual/Activation.html#Activation][manual]] also recommends setting up certain keybindings, so let's
get that done right at the beginning.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config (require 'org))
#+END_SRC

When hitting =RET= over a link, I rarely want to split that link into
two lines.  Much more often I want to follow the link, so let's enable
that behaviour.

#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC

The following function does some preliminary setup I wish to run when
I enter an Org mode file -- namely to enable =auto-fill-mode=.

#+BEGIN_SRC emacs-lisp
  (defun eh/setup-org-mode ()
    "Setup the editor for Org mode files."
    (auto-fill-mode t))

  (add-hook 'org-mode-hook 'eh/setup-org-mode)
#+END_SRC

** Agenda
All of my Org mode files, at least those relevant for my agenda, live
in =~/org/=.  So the list of agenda files should contain just this
directory, as the [[https://orgmode.org/manual/Agenda-Files.html#Agenda-Files][manual]] recommends.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (list (expand-file-name "~/org")))
#+END_SRC

* RSS reader
The [[https://github.com/skeeto/elfeed][Elfeed]] RSS reader is an excellent choice for keeping up with
blogs, podcasts, comics, and news sources from within Emacs.  I use it
together with [[https://github.com/remyhonig/elfeed-org][elfeed-org]].  The latter enables storing the RSS feeds
I'd like to follow in an Org file.

First, let's pull in Elfeed and elfeed-goodies.  This enables some
enhancements of the Elfeed interface.  I would also like to store the
feed database together with my other Org files.  Since these are
synchronized between machines, I don't have to bother reading things
twice.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :bind (("C-x w" . elfeed))
    :config
    (setq elfeed-db-directory "~/org/elfeed"))

  (use-package elfeed-goodies
    :config
    (elfeed-goodies/setup))
#+END_SRC

Then let's install elfeed-org and set it up to read a list of feeds
from my =~/org/feeds.org= file.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
#+END_SRC

* Programming
The following subsections set up Emacs to support a variety of
programming languages and related file formats which I use.

** PHP
The following setup is largely based on [[http://www.blogbyben.com/2016/08/emacs-php-modern-and-far-more-complete.html][this blog post]] by Ben Simon.

First, let's define a function to set up a reasonable environment for
PHP coding, including indentation with four spaces (and no TABs!).
Since I will be using web-mode for non-PHP files including template
files that contain PHP code, php-mode will not need to care about
HTML.

We'll also pull in [[https://github.com/xcwen/ac-php][ac-php]] for aggressive autocompletion.

#+BEGIN_SRC emacs-lisp
  (use-package ac-php
    :config
    (auto-complete-mode t)
    (require 'ac-php)
    (setq ac-sources '(ac-source-php))
    (yas-global-mode t)
    (ac-php-core-eldoc-setup))

  (defun eh/setup-php-mode ()
    "Set up indentation and other bits and pieces for PHP files."
    (setq indent-tabs-mode nil
          c-basic-offset 4
          php-template-compatibility nil)
    (subword-mode t))
#+END_SRC

Then, let's install [[https://github.com/emacs-php/php-mode][php-mode]].

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :config
    (require 'php-ext)
    (add-hook 'php-mode-hook 'eh/setup-php-mode))
#+END_SRC

Templates, CSS files and other related web files will be excellently
handled by [[http://web-mode.org/][web-mode]].

Again, let's define a setup function.

#+BEGIN_SRC emacs-lisp
  (defun eh/setup-web-mode ()
    "Set up indentation and other bits and pieces for web-mode."
    (setq indent-tabs-mode nil
          web-mode-markup-indent-offset 4
          web-mode-css-indent-offset 4
          web-mode-code-indent-offset 4)
    (add-to-list 'auto-mode-alist
                 '("\\.tpl\\'" . web-mode)))
#+END_SRC

Then let's pull in the package.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (add-hook 'web-mode-hook 'eh/setup-web-mode))
#+END_SRC

* Load a private configuration file
Some settings may need to reside in a private file that is kept
outside source control.  The constant =private-file= is defined to
contain the path to such a file.  If it exists, it will be loaded at
the end of the startup process.

#+BEGIN_SRC emacs-lisp
  (defconst private-file (concat user-emacs-directory "private.el")
    "A private initialization file that is kept outside of source
  control and is loaded at the very end of the startup process.")

  (when (file-readable-p private-file)
    (load-file private-file))
#+END_SRC
